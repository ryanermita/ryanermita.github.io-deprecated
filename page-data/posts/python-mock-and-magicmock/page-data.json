{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/python-mock-and-magicmock","result":{"data":{"markdownRemark":{"id":"6eb412c7-345c-5664-b636-9a5da040ec37","html":"<p>While I’m looking for a way to test my function that has a pymysql query, I stumble upon a <a href=\"https://stackoverflow.com/q/39227681\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">code snippet</a> with this line. (the same time I saw <a href=\"https://medium.com/ryans-dev-notes/python-autospeccing-72c2a5ba5e28\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">python autospeccing</a>).</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mock_cursor = mock.MagicMock()</code></pre></div>\n<p>I always use <code class=\"language-text\">Mock</code> when I do <a href=\"https://medium.com/ryans-dev-notes/unit-testing-with-python-unittest-module-c37531e28d75\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">unit test in python</a>, and its my first time to see a <code class=\"language-text\">MagicMock</code>. So it got me curious, what is the difference between the two and when to use one over the other.</p>\n<h2 id=\"mock-and-magicmock\" style=\"position:relative;\"><a href=\"#mock-and-magicmock\" aria-label=\"mock and magicmock permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mock and MagicMock</h2>\n<p><a href=\"https://docs.python.org/3.5/library/unittest.mock.html#unittest.mock.Mock\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">Mock</code></a> is use for replacing or mocking an object in python unittest while <a href=\"https://docs.python.org/3.5/library/unittest.mock.html#unittest.mock.MagicMock\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">MagicMock</code></a> is a subclass of Mock with all the <a href=\"https://dbader.org/blog/python-dunder-methods\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">magic methods</a> pre-created and ready to use. These are the pre-created magic methods and its default values for <code class=\"language-text\">MagicMock</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">__lt__: NotImplemented\n__gt__: NotImplemented\n__le__: NotImplemented\n__ge__: NotImplemented\n__int__: 1\n__contains__: False\n__len__: 0\n__iter__: iter([])\n__exit__: False\n__complex__: 1j\n__float__: 1.0\n__bool__: True\n__index__: 1\n__hash__: default hash for the mock\n__str__: default str for the mock\n__sizeof__: default sizeof for the mock</code></pre></div>\n<p>Below is an example of <code class=\"language-text\">Mock</code> trying to use one of the magic method pre-created in <code class=\"language-text\">MagicMock</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import unittest\nfrom unittest.mock import Mock\n\nclass TestMock(unittest.TestCase):\n    def test_mock(self):\n        mocked_object = Mock()\n        print(len(mocked_object))  # magic method\n        pass\n\nresult:\ntest_mock (test_func.TestMock) ... \n\nERROR====================================================================\nERROR: test_mock (test_func.TestMock)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/Users/ryan/Workspace/playground/test_func.py\", line 9, in test_mock\n    print(len(mocked_object))\nTypeError: object of type 'Mock' has no len()\n----------------------------------------------------------------------\nRan 1 test in 0.001s\nFAILED (errors=1)</code></pre></div>\n<p>Below is an example of <code class=\"language-text\">MagicMock</code> trying to use one of its pre-created magic method.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import unittest\nfrom unittest.mock import MagicMock\n\nclass TestMagicMock(unittest.TestCase):\n\n    def test_magicmock(self):\n        mocked_object = MagicMock()\n        print(len(mocked_object))  # magic method\n        pass\n\nresult:\ntest_mock (test_func.TestMagicMock) ... 0\nok\n--------------------------------------------------------------------\nRan 1 test in 0.001s\nOK</code></pre></div>\n<p>And below is an example on how can we create those magic methods in <code class=\"language-text\">Mock</code> manually.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import unittest\nfrom unittest.mock import Mock\n\nclass TestMock(unittest.TestCase):\n    def test_mock(self):\n        mocked_object = Mock()    #manually create a magic method    \n        mocked_object.__len__ = Mock(return_value=1)\n        print(len(mocked_object))  # magic method\n        pass\n    \nresult:\ntest_mock (test_func.TestMockAndMagicMock) ... 0\nok\n-------------------------------------------------------------------\nRan 1 test in 0.000s\nOK</code></pre></div>\n<p> </p>\n<h2 id=\"application\" style=\"position:relative;\"><a href=\"#application\" aria-label=\"application permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Application</h2>\n<p>If <code class=\"language-text\">MagicMock</code> already creates the magic methods automatically, what is the use of <code class=\"language-text\">Mock</code>? Why not just upgrade the <code class=\"language-text\">Mock</code> class with pre-created magic methods? and what scenarios can I use Mock and MagicMock? Luckily, someone already ask that <a href=\"https://stackoverflow.com/questions/17181687/mock-vs-magicmock\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">question on stackoverflow</a> and it is a pretty good answer. The answer is quoted from <a href=\"https://twitter.com/voidspace\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Michael Foord</a> the author of <code class=\"language-text\">Mock</code>.</p>\n<p>  <strong>Q</strong>: Why was MagicMock made a separate thing rather than just folding the ability into the default mock object?</p>\n<p>  <strong>A</strong>: One reasonable answer is that the way MagicMock works is that it preconfigures all these protocol methods by creating new Mocks and setting them, so if every new mock created a bunch of new mocks and set those as protocol methods and then all of those protocol methods created a bunch more mocks and set them on their protocol methods, you’ve got infinite recursion…</p>\n<p>  What if you want accessing your mock as a container object to be an error — you don’t want that to work? If every mock has automatically got every protocol method, then it becomes much more difficult to do that. And also, MagicMock does some of this preconfiguring for you, setting return values that might not be appropriate, so I thought it would be better to have this convenience one that has everything preconfigured and available for you, but you can also take a ordinary mock object and just configure the magic methods you want to exist…</p>\n<p>  The simple answer is: just use MagicMock everywhere if that’s the behavior you want.</p>\n<h2 id=\"resources\" style=\"position:relative;\"><a href=\"#resources\" aria-label=\"resources permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Resources</h2>\n<ul>\n<li><a href=\"https://docs.python.org/3/library/unittest.mock.html#unittest.mock.MagicMock\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Python Documentation: MagicMock</a></li>\n<li><a href=\"https://docs.python.org/3.5/library/unittest.mock.html#the-mock-class\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Python Documentation: Mock</a></li>\n<li><a href=\"https://pyvideo.org/pycon-us-2011/pycon-2011--testing-with-mock.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Michael Foord, Testing with Mock, PyCon2011 Atlanta</a></li>\n<li><a href=\"https://stackoverflow.com/q/17181687\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">StackOverflow’s Mock vs MagicMock</a></li>\n<li><a href=\"https://dbader.org/blog/python-dunder-methods\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Enriching Your Python Classes With Dunder (Magic, Special) Methods</a></li>\n</ul>","fields":{"slug":"/posts/python-mock-and-magicmock","tagSlugs":["/tag/python/","/tag/unittest/","/tag/mock/","/tag/magic-mock/"]},"frontmatter":{"date":"2019-02-04","description":"While I’m looking for a way to test my Python function that has a pymysql query, I stumble upon a code snippet with mock.MagicMock(). This pique my curiosity how it differs with mock.Mock() in Python. This article will discuss the difference between the two and when to use one over the other.","tags":["Python","unittest","Mock","MagicMock"],"title":"Python Mock and MagicMock","socialImage":null}}},"pageContext":{"slug":"/posts/python-mock-and-magicmock"}},"staticQueryHashes":["251939775","3872291177","401334301"]}